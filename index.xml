<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Equilibrist of Go Blog</title><link>https://equilibristofgo.github.io/blog/</link><description>Recent content on Equilibrist of Go Blog</description><generator>Hugo -- gohugo.io</generator><language>es-es</language><lastBuildDate>Tue, 13 Sep 2022 19:00:00 +0200</lastBuildDate><atom:link href="https://equilibristofgo.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>First Lightning Talk</title><link>https://equilibristofgo.github.io/blog/posts/01-post/</link><pubDate>Tue, 13 Sep 2022 19:00:00 +0200</pubDate><guid>https://equilibristofgo.github.io/blog/posts/01-post/</guid><description>Temas a tratar en la primera sesión Test y las capas La idea a tratar aquí es: bajo el punto de vista del testing en GoLang, testing unitario en el sentido que no levanta piezas auxiliares (de integración)
¿Cómo se deben comportar los test con las distintas capas de tu proyecto (controller/service,onion,clean&amp;hellip;)? ¿Deben los test intentar cruzar todas las capas? En caso de que no&amp;hellip; ¿qué pasa con la comunicación entre capas y la transformación de modelos (en los que los tengan diferenciados)?</description></item><item><title>¿De que va esto?</title><link>https://equilibristofgo.github.io/blog/posts/00-de-que-va-esto/</link><pubDate>Wed, 24 Aug 2022 23:00:00 +0200</pubDate><guid>https://equilibristofgo.github.io/blog/posts/00-de-que-va-esto/</guid><description>¿De que va esto? A los meses de iniciarme, en un proyecto en GoLang por primera vez, terminé montando un chat interno con mis compañeros para compartir dudas relativas al lenguaje, arquitectura, proyectos auxiliares&amp;hellip; y de como debíamos mantener el equilibrio en el desarrollo.
Yo siempre he sido de la opinión que los extremos nunca son buenos, y que siempre tienes que ver la situación alrededor de tu proyecto para buscar ese equilibrio en el desarrollo que tienes que abordar, y asi seguir avanzando.</description></item></channel></rss>