<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Equilibrist of Go Blog</title><link>https://equilibristofgo.github.io/blog/posts/</link><description>Recent content in Posts on Equilibrist of Go Blog</description><generator>Hugo -- gohugo.io</generator><language>es-es</language><lastBuildDate>Wed, 12 Oct 2022 19:00:00 +0200</lastBuildDate><atom:link href="https://equilibristofgo.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Livekit and Telegram Bot</title><link>https://equilibristofgo.github.io/blog/posts/livekit_telegram/</link><pubDate>Wed, 12 Oct 2022 19:00:00 +0200</pubDate><guid>https://equilibristofgo.github.io/blog/posts/livekit_telegram/</guid><description>Livekit and Telegram Bot Livekit Hace ya bastante tiempo se definio un estandar WebRTC y haciendo uso de ese estandar aparece Livekit que haciendo uso de la estupenda librearia Pion WebRTC.
Si una vez instalado arrancamos con la configuracion
Basicamente queda
livekit-server --dev --config config-sample.yml Y la configuracion deberia ser
port: 7880 rtc: port_range_start: 50000 port_range_end: 50100 tcp_port: 7881 use_external_ip: true keys: devkey: secret Hay que tener en cuenta, que la comunicacion se hace usando websocket por lo que para exponer el puerto 7880 desde un servidor al exterior debemos usar un proxy reverso.</description></item><item><title>Second Lightning Talk</title><link>https://equilibristofgo.github.io/blog/posts/02-post/</link><pubDate>Wed, 12 Oct 2022 19:00:00 +0200</pubDate><guid>https://equilibristofgo.github.io/blog/posts/02-post/</guid><description>Temas a tratar en la segunda sesión Uso del contexto En Golang, la manera de poder compartir valores a lo largo del proceso, y que distintos hilos no mezclen valores es el uso del contexto.
En Java, por ejemplo, tenemos el ThreadLocal un objeto qeu la JVM nos proporciona durante el flujo de ejecución para albergar esos valores.
En el caso de Go, el objeto esta preparado para que sea &amp;ldquo;thread-safe&amp;rdquo; y de alguna manera se apilan los valores que se van guardando.</description></item><item><title>Third Lightning Talk</title><link>https://equilibristofgo.github.io/blog/posts/03-post/</link><pubDate>Wed, 12 Oct 2022 19:00:00 +0200</pubDate><guid>https://equilibristofgo.github.io/blog/posts/03-post/</guid><description>Temas a tratar en la tercera sesión Mutex En golang existe el patron CSP que facilita mucho la concurrencia, pero de el hablaremos otro dia, hoy simplemente nos quedamos con los mutex, que nos permiten sincronizar bloques de codigo usando objetos que permiten el bloqueo de lectura o lectura/escritura.
&amp;hellip;
Ejemplos de código La idea de estos ejemplos, es ver como con un ejemplo de codigo simplificado podemos pasar de: La necesidad de sincronizar el acceso a variables comunes, descubierto por unos test unitarios, corridos para detectar &amp;ldquo;race ocndition&amp;rdquo; &amp;hellip; Ha como se puede reorganizar el codigo para dejar de usar los mutex y pasar al enfoque CSP.</description></item><item><title>First Lightning Talk</title><link>https://equilibristofgo.github.io/blog/posts/01-post/</link><pubDate>Tue, 13 Sep 2022 19:00:00 +0200</pubDate><guid>https://equilibristofgo.github.io/blog/posts/01-post/</guid><description>Temas a tratar en la primera sesión Test y las capas La idea a tratar aquí es: bajo el punto de vista del testing en GoLang, testing unitario en el sentido que no levanta piezas auxiliares (de integración)
¿Cómo se deben comportar los test con las distintas capas de tu proyecto (controller/service,onion,clean&amp;hellip;)? ¿Deben los test intentar cruzar todas las capas? En caso de que no&amp;hellip; ¿qué pasa con la comunicación entre capas y la transformación de modelos (en los que los tengan diferenciados)?</description></item><item><title>¿De que va esto?</title><link>https://equilibristofgo.github.io/blog/posts/00-de-que-va-esto/</link><pubDate>Wed, 24 Aug 2022 23:00:00 +0200</pubDate><guid>https://equilibristofgo.github.io/blog/posts/00-de-que-va-esto/</guid><description>¿De que va esto? A los meses de iniciarme, en un proyecto en GoLang por primera vez, terminé montando un chat interno con mis compañeros para compartir dudas relativas al lenguaje, arquitectura, proyectos auxiliares&amp;hellip; y de como debíamos mantener el equilibrio en el desarrollo.
Yo siempre he sido de la opinión que los extremos nunca son buenos, y que siempre tienes que ver la situación alrededor de tu proyecto para buscar ese equilibrio en el desarrollo que tienes que abordar, y asi seguir avanzando.</description></item></channel></rss>